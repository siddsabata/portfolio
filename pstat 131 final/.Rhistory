library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
tidymodels_prefer()
pdb_data_no_dups <- read.csv("data/pdb_data_no_dups.csv")
protein_data <- pdb_data_no_dups %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
protein_data_filtered <- protein_data %>%
semi_join(protein_data_top10, by='classification')
# filter dataset to only include x-ray diffraction data
protein_data_xray <- protein_data_filtered %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION')
# remove unnecessary columns
protein_data_less <- protein_data_xray %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue))
# remove any observations with any NA values and factorize `classification`
protein_cleaned <- na.omit(protein_data_less) %>%
mutate(classification = factor(classification)) %>%
clean_names()
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_cleaned, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 5, strata = classification)
# create recipe
protein_recipe <- recipe(classification ~ residue_count + resolution +
structure_molecular_weight + density_matthews +
density_percent_sol, data = protein_train) %>%
step_normalize(all_predictors()) %>%
step_downsample(classification, under_ratio = 2) %>%
step_pca(residue_count, structure_molecular_weight,
num_comp = 1, prefix = "rc_smw_component")
bt_mod <- boost_tree(mtry = tune(),
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
bt_grid <- grid_regular(mtry(range = c(1, 4)),
trees(range = c(200, 600)),
learn_rate(range = c(-10, -1)),
levels = 10)
bt_wf <- workflow() %>%
add_model(bt_mod) %>%
add_recipe(protein_recipe)
bt_results <- tune_grid(
bt_wf,
resamples = cv_folds,
grid = bt_grid
)
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
install.packages("xgboost")
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data_no_dups <- read.csv("data/pdb_data_no_dups.csv")
protein_data <- pdb_data_no_dups %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
protein_data_filtered <- protein_data %>%
semi_join(protein_data_top10, by='classification')
# filter dataset to only include x-ray diffraction data
protein_data_xray <- protein_data_filtered %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION')
# remove unnecessary columns
protein_data_less <- protein_data_xray %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue))
# remove any observations with any NA values and factorize `classification`
protein_cleaned <- na.omit(protein_data_less) %>%
mutate(classification = factor(classification)) %>%
clean_names()
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_cleaned, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 5, strata = classification)
# create recipe
protein_recipe <- recipe(classification ~ residue_count + resolution +
structure_molecular_weight + density_matthews +
density_percent_sol, data = protein_train) %>%
step_normalize(all_predictors()) %>%
step_downsample(classification, under_ratio = 2) %>%
step_pca(residue_count, structure_molecular_weight,
num_comp = 1, prefix = "rc_smw_component")
bt_mod <- boost_tree(mtry = tune(),
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
bt_grid <- grid_regular(mtry(range = c(1, 4)),
trees(range = c(200, 600)),
learn_rate(range = c(-10, -1)),
levels = 10)
bt_wf <- workflow() %>%
add_model(bt_mod) %>%
add_recipe(protein_recipe)
bt_results <- tune_grid(
bt_wf,
resamples = cv_folds,
grid = bt_grid
)
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data_no_dups <- read.csv("data/pdb_data_no_dups.csv")
protein_data <- pdb_data_no_dups %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
protein_data_filtered <- protein_data %>%
semi_join(protein_data_top10, by='classification')
# filter dataset to only include x-ray diffraction data
protein_data_xray <- protein_data_filtered %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION')
# remove unnecessary columns
protein_data_less <- protein_data_xray %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue))
# remove any observations with any NA values and factorize `classification`
protein_cleaned <- na.omit(protein_data_less) %>%
mutate(classification = factor(classification)) %>%
clean_names()
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_cleaned, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 5, strata = classification)
# create recipe
protein_recipe <- recipe(classification ~ residue_count + resolution +
structure_molecular_weight + density_matthews +
density_percent_sol, data = protein_train) %>%
step_normalize(all_predictors()) %>%
step_downsample(classification, under_ratio = 2) %>%
step_pca(residue_count, structure_molecular_weight,
num_comp = 1, prefix = "rc_smw_component")
bt_mod <- boost_tree(mtry = tune(),
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
bt_grid <- grid_regular(mtry(range = c(1, 4)),
trees(range = c(200, 600)),
learn_rate(range = c(-10, -1)),
levels = 10)
bt_wf <- workflow() %>%
add_model(bt_mod) %>%
add_recipe(protein_recipe)
bt_results <- tune_grid(
bt_wf,
resamples = cv_folds,
grid = bt_grid
)
saveRDS(bt_results, "bt_tuning_results.rds")
show_best(rf_results, metric = 'roc_auc')
rf_results <- readRDS("bt_tuning_results.rds")
show_best(rf_results, metric = 'roc_auc')
bt_results <- readRDS("bt_tuning_results.rds")
show_best(bt_results, metric = 'roc_auc')
# Import the CSV files into R as data frames
pdb_data_no_dups <- read.csv("data/pdb_data_no_dups.csv") %>%
head()
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
# import x-ray diffraction dataset
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
# import x-ray diffraction dataset
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
pdb_data %>%
head()
# check unique classifiers
unique_classifications <- unique(pdb_data_no_dups$classification)
# check unique classifiers
unique_classifications <- unique(pdb_data$classification)
# check unique classifiers
unique(pdb_data$classification)
# check unique classifiers
len(unique(pdb_data$classification))
# check unique classifiers
length(unique(pdb_data$classification))
# first, we're only going to work with protein data
protein_data <- pdb_data_no_dups %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# first, we're only going to work with protein data
protein_data <- pdb_data %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# number check unique classifiers
length(unique(protein_data$classification))
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# only keep top 10 types of proteins in dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
# create correlation matrix
cor_matrix <- cor(protein_cleaned[, sapply(protein_cleaned, is.numeric)])
# create correlation matrix
cor_matrix <- cor(protein_cleaned[, sapply(protein_data, is.numeric)])
# create correlation matrix
cor_matrix <- cor(protein_data[, sapply(protein_data, is.numeric)])
cor_matrix[upper.tri(cor_matrix, diag = TRUE)] <- NA
corrplot(cor_matrix, na.label = "  ", method = "color", tl.cex = 0.7)
cor_matrix
protein_data %>%
head()
ggplot(protein_data, aes(x = classification)) +
geom_bar() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(title = "Counts of Each Classification",
x = "Classification",
y = "Count")
size(protein_data)
dim(protein_data)
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_data, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 5, strata = classification)
View(protein_data)
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# creating working dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# creating working dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
# import x-ray diffraction dataset
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
pdb_data %>%
head()
# first, we're only going to work with protein data
protein_data <- pdb_data %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
# number check unique classifiers
length(unique(protein_data$classification))
# with the counts of the top classifiers in mind, we're going to keep the top 10 classifiers
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# creating working dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
protein_data <- pdb_data %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# creating working dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_data, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 10, strata = classification)
# create recipe
protein_recipe <- recipe(classification ~ residue_count + resolution +
structure_molecular_weight + density_matthews +
density_percent_sol, data = protein_train) %>%
step_normalize(all_predictors()) %>%
step_downsample(classification, under_ratio = 2) %>%
step_pca(residue_count, structure_molecular_weight,
num_comp = 1, prefix = "rc_smw_component")
protein_recipe %>%
prep() %>%
bake(new_data = protein_train)%>%
head()
library(janitor)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(corrplot)
library(ggthemes)
library(kableExtra)
library(themis)
library(ranger)
library(xgboost)
tidymodels_prefer()
pdb_data <- read.csv("data/pdb_data_no_dups.csv")
protein_data <- pdb_data %>%
dplyr::filter(!str_detect(classification, "DNA") & !str_detect(classification, "RNA"))
protein_data_top10 <- protein_data %>%
group_by(classification) %>%
summarise(count=n()) %>%
arrange(-count) %>%
slice_head(n=10) %>%
select(classification)
# creating working dataframe
protein_data <- protein_data %>%
semi_join(protein_data_top10, by='classification') %>%
dplyr::filter(experimentalTechnique == 'X-RAY DIFFRACTION') %>%
select(-c(crystallizationMethod, pdbxDetails, crystallizationTempK, publicationYear,
experimentalTechnique, macromoleculeType, phValue)) %>%
na.omit() %>%
mutate(classification = factor(classification)) %>%
clean_names()
set.seed(1234)
# create training and test datasets
protein_split <- initial_split(protein_data, prop = 0.8, strata = classification)
protein_train <- training(protein_split)
protein_test <- testing(protein_split)
# k-fold cross validation
cv_folds <- vfold_cv(protein_train, v = 10, strata = classification)
# create recipe
protein_recipe <- recipe(classification ~ residue_count + resolution +
structure_molecular_weight + density_matthews +
density_percent_sol, data = protein_train) %>%
step_normalize(all_predictors()) %>%
step_downsample(classification, under_ratio = 2) %>%
step_pca(residue_count, structure_molecular_weight,
num_comp = 1, prefix = "rc_smw_component")
bt_mod <- boost_tree(mtry = tune(),
trees = tune(),
learn_rate = tune()) %>%
set_engine("xgboost") %>%
set_mode("classification")
bt_grid <- grid_regular(mtry(range = c(1, 4)),
trees(range = c(200, 600)),
learn_rate(range = c(-10, -1)),
levels = 10)
bt_wf <- workflow() %>%
add_model(bt_mod) %>%
add_recipe(protein_recipe)
bt_results <- tune_grid(
bt_wf,
resamples = cv_folds,
grid = bt_grid
)
